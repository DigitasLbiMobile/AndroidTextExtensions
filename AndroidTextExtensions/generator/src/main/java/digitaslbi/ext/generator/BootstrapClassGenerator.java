/*
 * Copyright (c) 2015 DigitasLBi.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and limitations under the License.
 */

package digitaslbi.ext.generator;

import com.google.common.base.Function;
import com.google.common.base.Joiner;
import com.squareup.javapoet.JavaFile;
import com.squareup.javapoet.MethodSpec;
import com.squareup.javapoet.TypeSpec;
import digitaslbi.ext.common.FontFamily;

import javax.lang.model.element.Modifier;
import java.io.File;
import java.io.IOException;
import java.util.List;

import static com.google.common.collect.Collections2.transform;
import static com.google.common.collect.Iterables.toArray;
import static digitaslbi.ext.common.Constants.BOOTSTRAP_CLASS_NAME;

/**
 * @author Evelina Vrabie on 20/05/2015.
 */
public class BootstrapClassGenerator extends FontFamilyClassGenerator {

    public BootstrapClassGenerator(String packageName) {
        super(packageName);
    }

    public void generate(List<FontFamily> fontFamilies, File file) throws IOException {
        generate(fontFamilies).writeTo(file);
    }

    public void generate(List<FontFamily> fontFamilies, Appendable appendable) throws IOException {
        generate(fontFamilies).writeTo(appendable);
    }

    private JavaFile generate(List<FontFamily> fontFamilies) {
        final String params = Joiner.on(",").join(transform(fontFamilies, new Function<FontFamily, String>() {
            @Override public String apply(FontFamily input) {
                return "new $L()";
            }
        }));
        final String[] args = toArray(transform(fontFamilies, new Function<FontFamily, String>() {
            @Override public String apply(FontFamily input) {
                return input.getName();
            }
        }), String.class);

        final TypeSpec.Builder bootstrapClass = TypeSpec.classBuilder(BOOTSTRAP_CLASS_NAME)
                .addModifiers(Modifier.PUBLIC)
                .addMethod(MethodSpec.constructorBuilder()
                        .addModifiers(Modifier.PRIVATE)
                        .build())
                .addMethod(MethodSpec.methodBuilder("init")
                        .addModifiers(Modifier.PUBLIC, Modifier.STATIC)
                        .addStatement("digitaslbi.ext.font.FontManager.registerFontFamily(" + params + ")", args)
                        .build())
                .addJavadoc("Generated by Android Text Extensions plugin.\n" +
                        "@see <a href=\"https://github.com/DigitasLbiMobile/AndroidTextExtensions\">Android Text Extensions</a>\n");

        return JavaFile.builder(packageName, bootstrapClass.build()).build();
    }
}
