/*
 * Copyright (c) 2015 DigitasLBi.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and limitations under the License.
 */

// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:1.2.3'
    }
}

allprojects {
    repositories {
        jcenter()
    }
}

configurations {
    asciidoclet
}

dependencies {
    asciidoclet 'org.asciidoctor:asciidoclet:1.+'
}

task docs(type: Javadoc) {
    group 'Documentation'
    description 'Generates aggregated Javadoc for all projects.'

    destinationDir = file("$buildDir/docs/javadoc/")

    configure(options) {
        docletpath = configurations.asciidoclet.files.asType(List)
        doclet = 'org.asciidoctor.Asciidoclet'
        links 'http://docs.oracle.com/javase/7/docs/api/'
        addStringOption "-base-dir", "${projectDir}"
        addStringOption "-attribute", "name=${project.name}, version=${project.version}"
        windowTitle = 'Android Text Extensions JavaDoc'
        docTitle = "Android Text Extensions Javadoc JavaDoc ($project.version)"
    }
}

subprojects {
    afterEvaluate { project ->

        plugins.withType(JavaPlugin) {
            rootProject.tasks.docs {
                source += files(sourceSets.collect { srcSet -> srcSet.allJava })
                classpath += files(sourceSets*.compileClasspath)
            }

            task sourcesJar(type: Jar, dependsOn: classes) {
                classifier = 'sources'
                from sourceSets.main.allSource
            }

            task javadocJar(type: Jar, dependsOn: javadoc) {
                classifier = 'javadoc'
                from javadoc.destinationDir
            }

            artifacts {
                archives sourcesJar
                archives javadocJar
            }
        }

        plugins.withId('com.android.library') {

            task androidJavadocs(type: Javadoc) {
                println "Android " + android.sdkDirectory

                source += files(sourceSets.collect { srcSet -> srcSet.allJava })
                classpath += files(android.getBootClasspath().join(File.pathSeparator))
                failOnError false

                options.links = ['http://docs.oracle.com/javase/7/docs/api/']
                options.linksOffline("http://d.android.com/reference", "${android.sdkDirectory}/docs/reference")
                exclude '**/BuildConfig.java'
                exclude '**/R.java'
            }

            task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
                classifier = 'javadoc'
                from androidJavadocs.destinationDir
            }

            task androidSourcesJar(type: Jar) {
                classifier = 'sources'
                from android.sourceSets.main.java.sourceFiles
            }

            artifacts {
                archives androidSourcesJar
                archives androidJavadocsJar
            }

            rootProject.tasks.docs {
                source += files(android.sourceSets.main.java.srcDirs.collect { srcSet -> srcSet })
                classpath += files(android.getBootClasspath().join(File.pathSeparator))
            }
            rootProject.tasks.docs.dependsOn androidJavadocs
        }

    }
}
