/*
 * Copyright (c) 2015 DigitasLBi.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and limitations under the License.
 */

package digitaslbi.ext.generator;

import com.google.common.base.Function;
import com.google.common.io.CharStreams;
import digitaslbi.ext.common.Font;
import digitaslbi.ext.common.FontFamily;
import digitaslbi.ext.common.FontUtils;
import org.w3c.dom.Document;
import org.w3c.dom.Element;

import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.*;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import java.io.File;
import java.io.OutputStream;

import static com.google.common.collect.Iterables.transform;
import static digitaslbi.ext.generator.FileProcessor.getFileName;


/**
 * Represents a code {@link Generator} which generates an `XML` resource representing an
 * `android:TextAppearance` style definition for a {@link FontFamily}.
 */
public class XmlResourceGenerator implements Generator {

    private final Transformer transformer;

    public XmlResourceGenerator() throws TransformerConfigurationException {
        transformer = TransformerFactory.newInstance().newTransformer();
        transformer.setOutputProperty(OutputKeys.INDENT, "yes");
        transformer.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, "yes");
        transformer.setOutputProperty("{http://xml.apache.org/xslt}indent-amount", "4");
    }

    @Override
    public void generate(FontFamily fontFamily, File file) throws ParserConfigurationException, TransformerException {
        transformer.transform(generate(fontFamily), new StreamResult(new File(file, getFileName(fontFamily, FileType.XML))));
    }

    @Override
    public void generate(FontFamily fontFamily, Appendable appendable) throws ParserConfigurationException, TransformerException {
        transformer.transform(generate(fontFamily), new StreamResult(CharStreams.asWriter(appendable)));
    }

    @Override
    public void generate(FontFamily fontFamily, OutputStream outputStream) throws Exception {
        transformer.transform(generate(fontFamily), new StreamResult(outputStream));
    }

    private DOMSource generate(final FontFamily fontFamily) throws ParserConfigurationException {
        final Document doc = DocumentBuilderFactory.newInstance().newDocumentBuilder().newDocument();
        final Element resources = doc.createElement("resources");
        doc.appendChild(resources);
        resources.appendChild(doc.createComment("DO NOT MODIFY THIS FILE. Generated by Android Text Extensions plugin."));

        if (!fontFamily.hasFontWithSameName()) {
            Element style = doc.createElement("style");
            style.setAttribute("name", fontFamily.getName());
            style.setAttribute("parent", "android:TextAppearance");
            resources.appendChild(style);
        }

        final Iterable<Element> result = transform(fontFamily.getFonts(), new Function<Font, Element>() {
            @Override
            public Element apply(Font input) {
                return appendStyle(doc, fontFamily, input);
            }
        });

        for (Element element : result) {
            resources.appendChild(element);
        }

        return new DOMSource(doc);
    }

    private Element appendStyle(Document doc, FontFamily fontFamily, Font font) {
        final String styleName = FontUtils.nameToStyleName(font.getName());
        Element style = doc.createElement("style");
        style.setAttribute("name", styleName);

        if (styleName.equals(fontFamily.getName())) {
            style.setAttribute("parent", "android:TextAppearance");
        }

        Element item = doc.createElement("item");
        item.setAttribute("name", "android:fontFamily");
        item.setTextContent(styleName);

        style.appendChild(item);
        return style;
    }
}
